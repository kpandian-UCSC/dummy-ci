name: Code-Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, feature/**]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
  
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install pip
        run: |
          python -m pip install --upgrade pipenv wheel
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
      - name: Run test suite
        run: |
          pytest ./tests/*.py
  auto-deploy-to-lambda:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    needs: [lint, test]
    steps:      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #does this mean that the files in my github repo are accessible by this YAML file?
      - uses: actions/checkout@v2
      
      #installs a version of python, but I need this if deploying to a severless Python Lambda?
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      
      - name: Configure AWS credentials from Production account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # TODO:::
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      
      - name: Install pip
        run: |
          python -m pip install --upgrade pipenv wheel
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
      # Runs a set of commands using the runners shell; THIS DOESN'T WORK
      - name: deploy
        run: |
          zip -j deploy.zip ./src/module1/* #--> Zip the Code As we know lambda function accept the zip file.
          aws lambda update-function-code --function-name=lambda-gh-action-test --zip-file=fileb://deploy.zip 
      
      # #Deploy main.py to AWS
      # - name: AWS Lambda Deploy
      #   uses: appleboy/lambda-action@v0.0.4
      #   with:
      #     # TODO:::
      #     function_name: orchestration_framework
      #     zip_file: orchestration_framework.zip