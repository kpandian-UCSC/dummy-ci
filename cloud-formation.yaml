AWSTemplateFormatVersion: "2010-09-09"
Description: "Test Cloud Formation Deployment"

Parameters:
  S3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: test-bucket-cloudformations
    Type: String
    NoEcho: True
  S3BucketKey:
    AllowedPattern: ^[a-zA-Z0-9_./]*$
    Default: deploy.zip
    Type: String
    NoEcho: True
  ENVname:
    AllowedPattern: ^[a-zA-Z0-9_./]*$
    Default: MY_VALUE
    Type: String
    NoEcho: True
  ENVexample:
    AllowedPattern: ^[a-zA-Z0-9_./]*$
    Default: MY_ENV
    Type: String
    NoEcho: True



  apiGatewayName:
    Type: String
    Default: my-api
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: call
  apiGatewayHTTPMethod:
    Type: String
    Default: POST
  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-function

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: src/
      Description: "Code Description 1"
      Handler: "lambdas/lambda_function.lambda_handler"
      FunctionName: !Ref lambdaFunctionName
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.8

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
          PolicyName: lambda

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn

# Resources:
#   apilambda:
#     Type: "AWS::Lambda::Function"
#     Properties:
#       FunctionName: apilambda
#       Code: src/
#       Description: "Code Description 1"
#       Handler: "lambdas/lambda_function.lambda_handler"
#       Role: !GetAtt "SampleLambdaRole.Arn"
#       Runtime: python3.7
#       MemorySize: 128
#       Timeout: 60
#       Environment:
#         Variables:
#           MY_ENV: !Sub ${ENVexample}
  
#   Gateway1:
#     Type: 'AWS::ApiGatewayV2::Api'
#     DependsOn: apilambda
#     Properties:
#       Name: Gateway-Lambda1
#       Description: Lambda HTTP Gateway Proxy
#       Target: !GetAtt [ apilambda, Arn ]
#       ProtocolType: "HTTP"

#   LambdaApiGatewayPermission:
#     Type: AWS::Lambda::Permission
#     Properties:
#       Action: lambda:InvokeFunction
#       FunctionName: !GetAtt [ apilambda, Arn ]
#       Principal: apigateway.amazonaws.com
#       SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Gateway1}/*


  # Lambda2:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     FunctionName: LambdaTwo
  #     Code: src/
  #     Description: "Code Description 2"
  #     Handler: "lambdas/lambda_function2.lambda_handler"
  #     Role: !GetAtt "SampleLambdaRole.Arn"
  #     Runtime: python3.7
  #     MemorySize: 128
  #     Timeout: 60

  # Gateway2:
  #   Type: 'AWS::ApiGatewayV2::Api'
  #   DependsOn: Lambda2
  #   Properties:
  #     Name: Gateway-Lambda2
  #     Description: Lambda HTTP Gateway Proxy
  #     Target: !GetAtt [ Lambda2, Arn ]
  #     ProtocolType: "HTTP"

  # LambdaApiGatewayPermission2:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt [ Lambda2, Arn ]
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Gateway2}/*


  # MySecret:
  #   Type: 'AWS::SecretsManager::Secret'
  #   Properties:
  #     Name: MySecret
  #     Description: This should create a secret
  #     SecretString: !sub ${ENVname}


  # SampleLambdaRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action: ["sts:AssumeRole"]
  #           Effect: "Allow"
  #           Principal:
  #             Service: ["lambda.amazonaws.com"]
  #     Policies:
  #       - PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Action: ["cloudwatch:*", 
  #               "logs:*",                 
  #               "secretsmanager:GetSecretValue",
  #               "secretsmanager:DescribeSecret",
  #               "secretsmanager:ListSecrets"]
  #               Effect: "Allow"
  #               Resource: "*"
  #         PolicyName: "lambdaLogPolicy"
